<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.czqu.openimserver.dao.mapper.GroupsMapper">
  <resultMap id="BaseResultMap" type="net.czqu.openimserver.dao.pojo.Groups">
    <id column="group_id" jdbcType="VARCHAR" property="groupId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="notification" jdbcType="VARCHAR" property="notification" />
    <result column="introduction" jdbcType="VARCHAR" property="introduction" />
    <result column="face_url" jdbcType="VARCHAR" property="faceUrl" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="creator_user_id" jdbcType="VARCHAR" property="creatorUserId" />
    <result column="group_type" jdbcType="INTEGER" property="groupType" />
    <result column="need_verification" jdbcType="INTEGER" property="needVerification" />
    <result column="look_member_info" jdbcType="INTEGER" property="lookMemberInfo" />
    <result column="apply_member_friend" jdbcType="INTEGER" property="applyMemberFriend" />
    <result column="notification_update_time" jdbcType="TIMESTAMP" property="notificationUpdateTime" />
    <result column="notification_user_id" jdbcType="VARCHAR" property="notificationUserId" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="net.czqu.openimserver.dao.pojo.Groups">
    <result column="ex" jdbcType="LONGVARCHAR" property="ex" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    group_id, name, notification, introduction, face_url, create_time, status, creator_user_id, 
    group_type, need_verification, look_member_info, apply_member_friend, notification_update_time, 
    notification_user_id
  </sql>
  <sql id="Blob_Column_List">
    ex
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="net.czqu.openimserver.dao.example.GroupsExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from groups
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExample" parameterType="net.czqu.openimserver.dao.example.GroupsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from groups
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExampleSelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <if test="example != null and example.distinct">
      distinct
    </if>
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from groups
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    <if test="example != null and example.rows != null">
      <if test="example.offset != null">
        limit ${example.offset}, ${example.rows}
      </if>
      <if test="example.offset == null">
        limit ${example.rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from groups
    where group_id = #{groupId,jdbcType=VARCHAR}
  </select>
  <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from groups
    where group_id = #{groupId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from groups
    where group_id = #{groupId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="net.czqu.openimserver.dao.example.GroupsExample">
    delete from groups
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="net.czqu.openimserver.dao.pojo.Groups">
    insert into groups (group_id, name, notification, 
      introduction, face_url, create_time, 
      status, creator_user_id, group_type, 
      need_verification, look_member_info, apply_member_friend, 
      notification_update_time, notification_user_id, 
      ex)
    values (#{groupId,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{notification,jdbcType=VARCHAR}, 
      #{introduction,jdbcType=VARCHAR}, #{faceUrl,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{status,jdbcType=INTEGER}, #{creatorUserId,jdbcType=VARCHAR}, #{groupType,jdbcType=INTEGER}, 
      #{needVerification,jdbcType=INTEGER}, #{lookMemberInfo,jdbcType=INTEGER}, #{applyMemberFriend,jdbcType=INTEGER}, 
      #{notificationUpdateTime,jdbcType=TIMESTAMP}, #{notificationUserId,jdbcType=VARCHAR}, 
      #{ex,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="map">
    insert into groups
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.groupId != null">
            group_id,
          </if>
          <if test="record.name != null">
            name,
          </if>
          <if test="record.notification != null">
            notification,
          </if>
          <if test="record.introduction != null">
            introduction,
          </if>
          <if test="record.faceUrl != null">
            face_url,
          </if>
          <if test="record.createTime != null">
            create_time,
          </if>
          <if test="record.status != null">
            status,
          </if>
          <if test="record.creatorUserId != null">
            creator_user_id,
          </if>
          <if test="record.groupType != null">
            group_type,
          </if>
          <if test="record.needVerification != null">
            need_verification,
          </if>
          <if test="record.lookMemberInfo != null">
            look_member_info,
          </if>
          <if test="record.applyMemberFriend != null">
            apply_member_friend,
          </if>
          <if test="record.notificationUpdateTime != null">
            notification_update_time,
          </if>
          <if test="record.notificationUserId != null">
            notification_user_id,
          </if>
          <if test="record.ex != null">
            ex,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.groupId != null">
            #{record.groupId,jdbcType=VARCHAR},
          </if>
          <if test="record.name != null">
            #{record.name,jdbcType=VARCHAR},
          </if>
          <if test="record.notification != null">
            #{record.notification,jdbcType=VARCHAR},
          </if>
          <if test="record.introduction != null">
            #{record.introduction,jdbcType=VARCHAR},
          </if>
          <if test="record.faceUrl != null">
            #{record.faceUrl,jdbcType=VARCHAR},
          </if>
          <if test="record.createTime != null">
            #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.status != null">
            #{record.status,jdbcType=INTEGER},
          </if>
          <if test="record.creatorUserId != null">
            #{record.creatorUserId,jdbcType=VARCHAR},
          </if>
          <if test="record.groupType != null">
            #{record.groupType,jdbcType=INTEGER},
          </if>
          <if test="record.needVerification != null">
            #{record.needVerification,jdbcType=INTEGER},
          </if>
          <if test="record.lookMemberInfo != null">
            #{record.lookMemberInfo,jdbcType=INTEGER},
          </if>
          <if test="record.applyMemberFriend != null">
            #{record.applyMemberFriend,jdbcType=INTEGER},
          </if>
          <if test="record.notificationUpdateTime != null">
            #{record.notificationUpdateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.notificationUserId != null">
            #{record.notificationUserId,jdbcType=VARCHAR},
          </if>
          <if test="record.ex != null">
            #{record.ex,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="net.czqu.openimserver.dao.example.GroupsExample" resultType="java.lang.Long">
    select count(*) from groups
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update groups
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.groupId != null">
            group_id = #{record.groupId,jdbcType=VARCHAR},
          </if>
          <if test="record.name != null">
            name = #{record.name,jdbcType=VARCHAR},
          </if>
          <if test="record.notification != null">
            notification = #{record.notification,jdbcType=VARCHAR},
          </if>
          <if test="record.introduction != null">
            introduction = #{record.introduction,jdbcType=VARCHAR},
          </if>
          <if test="record.faceUrl != null">
            face_url = #{record.faceUrl,jdbcType=VARCHAR},
          </if>
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.status != null">
            status = #{record.status,jdbcType=INTEGER},
          </if>
          <if test="record.creatorUserId != null">
            creator_user_id = #{record.creatorUserId,jdbcType=VARCHAR},
          </if>
          <if test="record.groupType != null">
            group_type = #{record.groupType,jdbcType=INTEGER},
          </if>
          <if test="record.needVerification != null">
            need_verification = #{record.needVerification,jdbcType=INTEGER},
          </if>
          <if test="record.lookMemberInfo != null">
            look_member_info = #{record.lookMemberInfo,jdbcType=INTEGER},
          </if>
          <if test="record.applyMemberFriend != null">
            apply_member_friend = #{record.applyMemberFriend,jdbcType=INTEGER},
          </if>
          <if test="record.notificationUpdateTime != null">
            notification_update_time = #{record.notificationUpdateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.notificationUserId != null">
            notification_user_id = #{record.notificationUserId,jdbcType=VARCHAR},
          </if>
          <if test="record.ex != null">
            ex = #{record.ex,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update groups
    set group_id = #{record.groupId,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      notification = #{record.notification,jdbcType=VARCHAR},
      introduction = #{record.introduction,jdbcType=VARCHAR},
      face_url = #{record.faceUrl,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      status = #{record.status,jdbcType=INTEGER},
      creator_user_id = #{record.creatorUserId,jdbcType=VARCHAR},
      group_type = #{record.groupType,jdbcType=INTEGER},
      need_verification = #{record.needVerification,jdbcType=INTEGER},
      look_member_info = #{record.lookMemberInfo,jdbcType=INTEGER},
      apply_member_friend = #{record.applyMemberFriend,jdbcType=INTEGER},
      notification_update_time = #{record.notificationUpdateTime,jdbcType=TIMESTAMP},
      notification_user_id = #{record.notificationUserId,jdbcType=VARCHAR},
      ex = #{record.ex,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update groups
    set group_id = #{record.groupId,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      notification = #{record.notification,jdbcType=VARCHAR},
      introduction = #{record.introduction,jdbcType=VARCHAR},
      face_url = #{record.faceUrl,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      status = #{record.status,jdbcType=INTEGER},
      creator_user_id = #{record.creatorUserId,jdbcType=VARCHAR},
      group_type = #{record.groupType,jdbcType=INTEGER},
      need_verification = #{record.needVerification,jdbcType=INTEGER},
      look_member_info = #{record.lookMemberInfo,jdbcType=INTEGER},
      apply_member_friend = #{record.applyMemberFriend,jdbcType=INTEGER},
      notification_update_time = #{record.notificationUpdateTime,jdbcType=TIMESTAMP},
      notification_user_id = #{record.notificationUserId,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update groups
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.name != null">
            name = #{record.name,jdbcType=VARCHAR},
          </if>
          <if test="record.notification != null">
            notification = #{record.notification,jdbcType=VARCHAR},
          </if>
          <if test="record.introduction != null">
            introduction = #{record.introduction,jdbcType=VARCHAR},
          </if>
          <if test="record.faceUrl != null">
            face_url = #{record.faceUrl,jdbcType=VARCHAR},
          </if>
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.status != null">
            status = #{record.status,jdbcType=INTEGER},
          </if>
          <if test="record.creatorUserId != null">
            creator_user_id = #{record.creatorUserId,jdbcType=VARCHAR},
          </if>
          <if test="record.groupType != null">
            group_type = #{record.groupType,jdbcType=INTEGER},
          </if>
          <if test="record.needVerification != null">
            need_verification = #{record.needVerification,jdbcType=INTEGER},
          </if>
          <if test="record.lookMemberInfo != null">
            look_member_info = #{record.lookMemberInfo,jdbcType=INTEGER},
          </if>
          <if test="record.applyMemberFriend != null">
            apply_member_friend = #{record.applyMemberFriend,jdbcType=INTEGER},
          </if>
          <if test="record.notificationUpdateTime != null">
            notification_update_time = #{record.notificationUpdateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.notificationUserId != null">
            notification_user_id = #{record.notificationUserId,jdbcType=VARCHAR},
          </if>
          <if test="record.ex != null">
            ex = #{record.ex,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    where group_id = #{record.groupId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="net.czqu.openimserver.dao.pojo.Groups">
    update groups
    set name = #{name,jdbcType=VARCHAR},
      notification = #{notification,jdbcType=VARCHAR},
      introduction = #{introduction,jdbcType=VARCHAR},
      face_url = #{faceUrl,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=INTEGER},
      creator_user_id = #{creatorUserId,jdbcType=VARCHAR},
      group_type = #{groupType,jdbcType=INTEGER},
      need_verification = #{needVerification,jdbcType=INTEGER},
      look_member_info = #{lookMemberInfo,jdbcType=INTEGER},
      apply_member_friend = #{applyMemberFriend,jdbcType=INTEGER},
      notification_update_time = #{notificationUpdateTime,jdbcType=TIMESTAMP},
      notification_user_id = #{notificationUserId,jdbcType=VARCHAR},
      ex = #{ex,jdbcType=LONGVARCHAR}
    where group_id = #{groupId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="net.czqu.openimserver.dao.pojo.Groups">
    update groups
    set name = #{name,jdbcType=VARCHAR},
      notification = #{notification,jdbcType=VARCHAR},
      introduction = #{introduction,jdbcType=VARCHAR},
      face_url = #{faceUrl,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=INTEGER},
      creator_user_id = #{creatorUserId,jdbcType=VARCHAR},
      group_type = #{groupType,jdbcType=INTEGER},
      need_verification = #{needVerification,jdbcType=INTEGER},
      look_member_info = #{lookMemberInfo,jdbcType=INTEGER},
      apply_member_friend = #{applyMemberFriend,jdbcType=INTEGER},
      notification_update_time = #{notificationUpdateTime,jdbcType=TIMESTAMP},
      notification_user_id = #{notificationUserId,jdbcType=VARCHAR}
    where group_id = #{groupId,jdbcType=VARCHAR}
  </update>
  <select id="selectOneByExample" parameterType="net.czqu.openimserver.dao.example.GroupsExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from groups
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleWithBLOBs" parameterType="net.czqu.openimserver.dao.example.GroupsExample" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from groups
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleSelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from groups
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" parameterType="map">
    insert into groups
    (group_id, name, notification, introduction, face_url, create_time, status, creator_user_id, 
      group_type, need_verification, look_member_info, apply_member_friend, notification_update_time, 
      notification_user_id, ex)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.groupId,jdbcType=VARCHAR}, #{item.name,jdbcType=VARCHAR}, #{item.notification,jdbcType=VARCHAR}, 
        #{item.introduction,jdbcType=VARCHAR}, #{item.faceUrl,jdbcType=VARCHAR}, #{item.createTime,jdbcType=TIMESTAMP}, 
        #{item.status,jdbcType=INTEGER}, #{item.creatorUserId,jdbcType=VARCHAR}, #{item.groupType,jdbcType=INTEGER}, 
        #{item.needVerification,jdbcType=INTEGER}, #{item.lookMemberInfo,jdbcType=INTEGER}, 
        #{item.applyMemberFriend,jdbcType=INTEGER}, #{item.notificationUpdateTime,jdbcType=TIMESTAMP}, 
        #{item.notificationUserId,jdbcType=VARCHAR}, #{item.ex,jdbcType=LONGVARCHAR})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    insert into groups (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'group_id'.toString() == column.value">
          #{item.groupId,jdbcType=VARCHAR}
        </if>
        <if test="'name'.toString() == column.value">
          #{item.name,jdbcType=VARCHAR}
        </if>
        <if test="'notification'.toString() == column.value">
          #{item.notification,jdbcType=VARCHAR}
        </if>
        <if test="'introduction'.toString() == column.value">
          #{item.introduction,jdbcType=VARCHAR}
        </if>
        <if test="'face_url'.toString() == column.value">
          #{item.faceUrl,jdbcType=VARCHAR}
        </if>
        <if test="'create_time'.toString() == column.value">
          #{item.createTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'status'.toString() == column.value">
          #{item.status,jdbcType=INTEGER}
        </if>
        <if test="'creator_user_id'.toString() == column.value">
          #{item.creatorUserId,jdbcType=VARCHAR}
        </if>
        <if test="'group_type'.toString() == column.value">
          #{item.groupType,jdbcType=INTEGER}
        </if>
        <if test="'need_verification'.toString() == column.value">
          #{item.needVerification,jdbcType=INTEGER}
        </if>
        <if test="'look_member_info'.toString() == column.value">
          #{item.lookMemberInfo,jdbcType=INTEGER}
        </if>
        <if test="'apply_member_friend'.toString() == column.value">
          #{item.applyMemberFriend,jdbcType=INTEGER}
        </if>
        <if test="'notification_update_time'.toString() == column.value">
          #{item.notificationUpdateTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'notification_user_id'.toString() == column.value">
          #{item.notificationUserId,jdbcType=VARCHAR}
        </if>
        <if test="'ex'.toString() == column.value">
          #{item.ex,jdbcType=LONGVARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>