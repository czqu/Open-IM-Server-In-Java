<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.czqu.openimserver.dao.mapper.FriendRequestsMapper">
  <resultMap id="BaseResultMap" type="net.czqu.openimserver.dao.pojo.FriendRequests">
    <id column="from_user_id" jdbcType="VARCHAR" property="fromUserId" />
    <id column="to_user_id" jdbcType="VARCHAR" property="toUserId" />
    <result column="handle_result" jdbcType="INTEGER" property="handleResult" />
    <result column="req_msg" jdbcType="VARCHAR" property="reqMsg" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="handler_user_id" jdbcType="VARCHAR" property="handlerUserId" />
    <result column="handle_msg" jdbcType="VARCHAR" property="handleMsg" />
    <result column="handle_time" jdbcType="TIMESTAMP" property="handleTime" />
    <result column="ex" jdbcType="VARCHAR" property="ex" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    from_user_id, to_user_id, handle_result, req_msg, create_time, handler_user_id, handle_msg, 
    handle_time, ex
  </sql>
  <select id="selectByExample" parameterType="net.czqu.openimserver.dao.example.FriendRequestsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from friend_requests
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExampleSelective" parameterType="map" resultMap="BaseResultMap">
    select
    <if test="example != null and example.distinct">
      distinct
    </if>
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
    from friend_requests
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    <if test="example != null and example.rows != null">
      <if test="example.offset != null">
        limit ${example.offset}, ${example.rows}
      </if>
      <if test="example.offset == null">
        limit ${example.rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="net.czqu.openimserver.dao.pojo.FriendRequestsKey" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from friend_requests
    where from_user_id = #{fromUserId,jdbcType=VARCHAR}
      and to_user_id = #{toUserId,jdbcType=VARCHAR}
  </select>
  <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="BaseResultMap">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
    from friend_requests
    where from_user_id = #{record.fromUserId,jdbcType=VARCHAR}
      and to_user_id = #{record.toUserId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="net.czqu.openimserver.dao.pojo.FriendRequestsKey">
    delete from friend_requests
    where from_user_id = #{fromUserId,jdbcType=VARCHAR}
      and to_user_id = #{toUserId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="net.czqu.openimserver.dao.example.FriendRequestsExample">
    delete from friend_requests
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="net.czqu.openimserver.dao.pojo.FriendRequests">
    insert into friend_requests (from_user_id, to_user_id, handle_result, 
      req_msg, create_time, handler_user_id, 
      handle_msg, handle_time, ex
      )
    values (#{fromUserId,jdbcType=VARCHAR}, #{toUserId,jdbcType=VARCHAR}, #{handleResult,jdbcType=INTEGER}, 
      #{reqMsg,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{handlerUserId,jdbcType=VARCHAR}, 
      #{handleMsg,jdbcType=VARCHAR}, #{handleTime,jdbcType=TIMESTAMP}, #{ex,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="map">
    insert into friend_requests
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.fromUserId != null">
            from_user_id,
          </if>
          <if test="record.toUserId != null">
            to_user_id,
          </if>
          <if test="record.handleResult != null">
            handle_result,
          </if>
          <if test="record.reqMsg != null">
            req_msg,
          </if>
          <if test="record.createTime != null">
            create_time,
          </if>
          <if test="record.handlerUserId != null">
            handler_user_id,
          </if>
          <if test="record.handleMsg != null">
            handle_msg,
          </if>
          <if test="record.handleTime != null">
            handle_time,
          </if>
          <if test="record.ex != null">
            ex,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.fromUserId != null">
            #{record.fromUserId,jdbcType=VARCHAR},
          </if>
          <if test="record.toUserId != null">
            #{record.toUserId,jdbcType=VARCHAR},
          </if>
          <if test="record.handleResult != null">
            #{record.handleResult,jdbcType=INTEGER},
          </if>
          <if test="record.reqMsg != null">
            #{record.reqMsg,jdbcType=VARCHAR},
          </if>
          <if test="record.createTime != null">
            #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.handlerUserId != null">
            #{record.handlerUserId,jdbcType=VARCHAR},
          </if>
          <if test="record.handleMsg != null">
            #{record.handleMsg,jdbcType=VARCHAR},
          </if>
          <if test="record.handleTime != null">
            #{record.handleTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.ex != null">
            #{record.ex,jdbcType=VARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="net.czqu.openimserver.dao.example.FriendRequestsExample" resultType="java.lang.Long">
    select count(*) from friend_requests
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update friend_requests
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.fromUserId != null">
            from_user_id = #{record.fromUserId,jdbcType=VARCHAR},
          </if>
          <if test="record.toUserId != null">
            to_user_id = #{record.toUserId,jdbcType=VARCHAR},
          </if>
          <if test="record.handleResult != null">
            handle_result = #{record.handleResult,jdbcType=INTEGER},
          </if>
          <if test="record.reqMsg != null">
            req_msg = #{record.reqMsg,jdbcType=VARCHAR},
          </if>
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.handlerUserId != null">
            handler_user_id = #{record.handlerUserId,jdbcType=VARCHAR},
          </if>
          <if test="record.handleMsg != null">
            handle_msg = #{record.handleMsg,jdbcType=VARCHAR},
          </if>
          <if test="record.handleTime != null">
            handle_time = #{record.handleTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.ex != null">
            ex = #{record.ex,jdbcType=VARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update friend_requests
    set from_user_id = #{record.fromUserId,jdbcType=VARCHAR},
      to_user_id = #{record.toUserId,jdbcType=VARCHAR},
      handle_result = #{record.handleResult,jdbcType=INTEGER},
      req_msg = #{record.reqMsg,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      handler_user_id = #{record.handlerUserId,jdbcType=VARCHAR},
      handle_msg = #{record.handleMsg,jdbcType=VARCHAR},
      handle_time = #{record.handleTime,jdbcType=TIMESTAMP},
      ex = #{record.ex,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update friend_requests
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.handleResult != null">
            handle_result = #{record.handleResult,jdbcType=INTEGER},
          </if>
          <if test="record.reqMsg != null">
            req_msg = #{record.reqMsg,jdbcType=VARCHAR},
          </if>
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.handlerUserId != null">
            handler_user_id = #{record.handlerUserId,jdbcType=VARCHAR},
          </if>
          <if test="record.handleMsg != null">
            handle_msg = #{record.handleMsg,jdbcType=VARCHAR},
          </if>
          <if test="record.handleTime != null">
            handle_time = #{record.handleTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.ex != null">
            ex = #{record.ex,jdbcType=VARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    where from_user_id = #{record.fromUserId,jdbcType=VARCHAR}
      and to_user_id = #{record.toUserId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="net.czqu.openimserver.dao.pojo.FriendRequests">
    update friend_requests
    set handle_result = #{handleResult,jdbcType=INTEGER},
      req_msg = #{reqMsg,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      handler_user_id = #{handlerUserId,jdbcType=VARCHAR},
      handle_msg = #{handleMsg,jdbcType=VARCHAR},
      handle_time = #{handleTime,jdbcType=TIMESTAMP},
      ex = #{ex,jdbcType=VARCHAR}
    where from_user_id = #{fromUserId,jdbcType=VARCHAR}
      and to_user_id = #{toUserId,jdbcType=VARCHAR}
  </update>
  <select id="selectOneByExample" parameterType="net.czqu.openimserver.dao.example.FriendRequestsExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from friend_requests
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleSelective" parameterType="map" resultMap="BaseResultMap">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
    from friend_requests
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" parameterType="map">
    insert into friend_requests
    (from_user_id, to_user_id, handle_result, req_msg, create_time, handler_user_id, 
      handle_msg, handle_time, ex)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.fromUserId,jdbcType=VARCHAR}, #{item.toUserId,jdbcType=VARCHAR}, #{item.handleResult,jdbcType=INTEGER}, 
        #{item.reqMsg,jdbcType=VARCHAR}, #{item.createTime,jdbcType=TIMESTAMP}, #{item.handlerUserId,jdbcType=VARCHAR}, 
        #{item.handleMsg,jdbcType=VARCHAR}, #{item.handleTime,jdbcType=TIMESTAMP}, #{item.ex,jdbcType=VARCHAR}
        )
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    insert into friend_requests (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'from_user_id'.toString() == column.value">
          #{item.fromUserId,jdbcType=VARCHAR}
        </if>
        <if test="'to_user_id'.toString() == column.value">
          #{item.toUserId,jdbcType=VARCHAR}
        </if>
        <if test="'handle_result'.toString() == column.value">
          #{item.handleResult,jdbcType=INTEGER}
        </if>
        <if test="'req_msg'.toString() == column.value">
          #{item.reqMsg,jdbcType=VARCHAR}
        </if>
        <if test="'create_time'.toString() == column.value">
          #{item.createTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'handler_user_id'.toString() == column.value">
          #{item.handlerUserId,jdbcType=VARCHAR}
        </if>
        <if test="'handle_msg'.toString() == column.value">
          #{item.handleMsg,jdbcType=VARCHAR}
        </if>
        <if test="'handle_time'.toString() == column.value">
          #{item.handleTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'ex'.toString() == column.value">
          #{item.ex,jdbcType=VARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>