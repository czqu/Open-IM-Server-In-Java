<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.czqu.openimserver.dao.mapper.ConversationsMapper">
  <resultMap id="BaseResultMap" type="net.czqu.openimserver.dao.pojo.Conversations">
    <id column="owner_user_id" jdbcType="CHAR" property="ownerUserId" />
    <id column="conversation_id" jdbcType="CHAR" property="conversationId" />
    <result column="conversation_type" jdbcType="INTEGER" property="conversationType" />
    <result column="user_id" jdbcType="CHAR" property="userId" />
    <result column="group_id" jdbcType="CHAR" property="groupId" />
    <result column="recv_msg_opt" jdbcType="INTEGER" property="recvMsgOpt" />
    <result column="unread_count" jdbcType="INTEGER" property="unreadCount" />
    <result column="draft_text_time" jdbcType="BIGINT" property="draftTextTime" />
    <result column="is_pinned" jdbcType="BIT" property="isPinned" />
    <result column="is_private_chat" jdbcType="BIT" property="isPrivateChat" />
    <result column="burn_duration" jdbcType="INTEGER" property="burnDuration" />
    <result column="group_at_type" jdbcType="INTEGER" property="groupAtType" />
    <result column="is_not_in_group" jdbcType="BIT" property="isNotInGroup" />
    <result column="update_unread_count_time" jdbcType="BIGINT" property="updateUnreadCountTime" />
    <result column="attached_info" jdbcType="VARCHAR" property="attachedInfo" />
    <result column="ex" jdbcType="VARCHAR" property="ex" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    owner_user_id, conversation_id, conversation_type, user_id, group_id, recv_msg_opt, 
    unread_count, draft_text_time, is_pinned, is_private_chat, burn_duration, group_at_type, 
    is_not_in_group, update_unread_count_time, attached_info, ex
  </sql>
  <select id="selectByExample" parameterType="net.czqu.openimserver.dao.example.ConversationsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from conversations
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExampleSelective" parameterType="map" resultMap="BaseResultMap">
    select
    <if test="example != null and example.distinct">
      distinct
    </if>
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
    from conversations
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    <if test="example != null and example.rows != null">
      <if test="example.offset != null">
        limit ${example.offset}, ${example.rows}
      </if>
      <if test="example.offset == null">
        limit ${example.rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="net.czqu.openimserver.dao.pojo.ConversationsKey" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from conversations
    where owner_user_id = #{ownerUserId,jdbcType=CHAR}
      and conversation_id = #{conversationId,jdbcType=CHAR}
  </select>
  <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="BaseResultMap">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
    from conversations
    where owner_user_id = #{record.ownerUserId,jdbcType=CHAR}
      and conversation_id = #{record.conversationId,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="net.czqu.openimserver.dao.pojo.ConversationsKey">
    delete from conversations
    where owner_user_id = #{ownerUserId,jdbcType=CHAR}
      and conversation_id = #{conversationId,jdbcType=CHAR}
  </delete>
  <delete id="deleteByExample" parameterType="net.czqu.openimserver.dao.example.ConversationsExample">
    delete from conversations
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="net.czqu.openimserver.dao.pojo.Conversations">
    insert into conversations (owner_user_id, conversation_id, conversation_type, 
      user_id, group_id, recv_msg_opt, 
      unread_count, draft_text_time, is_pinned, 
      is_private_chat, burn_duration, group_at_type, 
      is_not_in_group, update_unread_count_time, attached_info, 
      ex)
    values (#{ownerUserId,jdbcType=CHAR}, #{conversationId,jdbcType=CHAR}, #{conversationType,jdbcType=INTEGER}, 
      #{userId,jdbcType=CHAR}, #{groupId,jdbcType=CHAR}, #{recvMsgOpt,jdbcType=INTEGER}, 
      #{unreadCount,jdbcType=INTEGER}, #{draftTextTime,jdbcType=BIGINT}, #{isPinned,jdbcType=BIT}, 
      #{isPrivateChat,jdbcType=BIT}, #{burnDuration,jdbcType=INTEGER}, #{groupAtType,jdbcType=INTEGER}, 
      #{isNotInGroup,jdbcType=BIT}, #{updateUnreadCountTime,jdbcType=BIGINT}, #{attachedInfo,jdbcType=VARCHAR}, 
      #{ex,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="map">
    insert into conversations
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.ownerUserId != null">
            owner_user_id,
          </if>
          <if test="record.conversationId != null">
            conversation_id,
          </if>
          <if test="record.conversationType != null">
            conversation_type,
          </if>
          <if test="record.userId != null">
            user_id,
          </if>
          <if test="record.groupId != null">
            group_id,
          </if>
          <if test="record.recvMsgOpt != null">
            recv_msg_opt,
          </if>
          <if test="record.unreadCount != null">
            unread_count,
          </if>
          <if test="record.draftTextTime != null">
            draft_text_time,
          </if>
          <if test="record.isPinned != null">
            is_pinned,
          </if>
          <if test="record.isPrivateChat != null">
            is_private_chat,
          </if>
          <if test="record.burnDuration != null">
            burn_duration,
          </if>
          <if test="record.groupAtType != null">
            group_at_type,
          </if>
          <if test="record.isNotInGroup != null">
            is_not_in_group,
          </if>
          <if test="record.updateUnreadCountTime != null">
            update_unread_count_time,
          </if>
          <if test="record.attachedInfo != null">
            attached_info,
          </if>
          <if test="record.ex != null">
            ex,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.ownerUserId != null">
            #{record.ownerUserId,jdbcType=CHAR},
          </if>
          <if test="record.conversationId != null">
            #{record.conversationId,jdbcType=CHAR},
          </if>
          <if test="record.conversationType != null">
            #{record.conversationType,jdbcType=INTEGER},
          </if>
          <if test="record.userId != null">
            #{record.userId,jdbcType=CHAR},
          </if>
          <if test="record.groupId != null">
            #{record.groupId,jdbcType=CHAR},
          </if>
          <if test="record.recvMsgOpt != null">
            #{record.recvMsgOpt,jdbcType=INTEGER},
          </if>
          <if test="record.unreadCount != null">
            #{record.unreadCount,jdbcType=INTEGER},
          </if>
          <if test="record.draftTextTime != null">
            #{record.draftTextTime,jdbcType=BIGINT},
          </if>
          <if test="record.isPinned != null">
            #{record.isPinned,jdbcType=BIT},
          </if>
          <if test="record.isPrivateChat != null">
            #{record.isPrivateChat,jdbcType=BIT},
          </if>
          <if test="record.burnDuration != null">
            #{record.burnDuration,jdbcType=INTEGER},
          </if>
          <if test="record.groupAtType != null">
            #{record.groupAtType,jdbcType=INTEGER},
          </if>
          <if test="record.isNotInGroup != null">
            #{record.isNotInGroup,jdbcType=BIT},
          </if>
          <if test="record.updateUnreadCountTime != null">
            #{record.updateUnreadCountTime,jdbcType=BIGINT},
          </if>
          <if test="record.attachedInfo != null">
            #{record.attachedInfo,jdbcType=VARCHAR},
          </if>
          <if test="record.ex != null">
            #{record.ex,jdbcType=VARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="net.czqu.openimserver.dao.example.ConversationsExample" resultType="java.lang.Long">
    select count(*) from conversations
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update conversations
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.ownerUserId != null">
            owner_user_id = #{record.ownerUserId,jdbcType=CHAR},
          </if>
          <if test="record.conversationId != null">
            conversation_id = #{record.conversationId,jdbcType=CHAR},
          </if>
          <if test="record.conversationType != null">
            conversation_type = #{record.conversationType,jdbcType=INTEGER},
          </if>
          <if test="record.userId != null">
            user_id = #{record.userId,jdbcType=CHAR},
          </if>
          <if test="record.groupId != null">
            group_id = #{record.groupId,jdbcType=CHAR},
          </if>
          <if test="record.recvMsgOpt != null">
            recv_msg_opt = #{record.recvMsgOpt,jdbcType=INTEGER},
          </if>
          <if test="record.unreadCount != null">
            unread_count = #{record.unreadCount,jdbcType=INTEGER},
          </if>
          <if test="record.draftTextTime != null">
            draft_text_time = #{record.draftTextTime,jdbcType=BIGINT},
          </if>
          <if test="record.isPinned != null">
            is_pinned = #{record.isPinned,jdbcType=BIT},
          </if>
          <if test="record.isPrivateChat != null">
            is_private_chat = #{record.isPrivateChat,jdbcType=BIT},
          </if>
          <if test="record.burnDuration != null">
            burn_duration = #{record.burnDuration,jdbcType=INTEGER},
          </if>
          <if test="record.groupAtType != null">
            group_at_type = #{record.groupAtType,jdbcType=INTEGER},
          </if>
          <if test="record.isNotInGroup != null">
            is_not_in_group = #{record.isNotInGroup,jdbcType=BIT},
          </if>
          <if test="record.updateUnreadCountTime != null">
            update_unread_count_time = #{record.updateUnreadCountTime,jdbcType=BIGINT},
          </if>
          <if test="record.attachedInfo != null">
            attached_info = #{record.attachedInfo,jdbcType=VARCHAR},
          </if>
          <if test="record.ex != null">
            ex = #{record.ex,jdbcType=VARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update conversations
    set owner_user_id = #{record.ownerUserId,jdbcType=CHAR},
      conversation_id = #{record.conversationId,jdbcType=CHAR},
      conversation_type = #{record.conversationType,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=CHAR},
      group_id = #{record.groupId,jdbcType=CHAR},
      recv_msg_opt = #{record.recvMsgOpt,jdbcType=INTEGER},
      unread_count = #{record.unreadCount,jdbcType=INTEGER},
      draft_text_time = #{record.draftTextTime,jdbcType=BIGINT},
      is_pinned = #{record.isPinned,jdbcType=BIT},
      is_private_chat = #{record.isPrivateChat,jdbcType=BIT},
      burn_duration = #{record.burnDuration,jdbcType=INTEGER},
      group_at_type = #{record.groupAtType,jdbcType=INTEGER},
      is_not_in_group = #{record.isNotInGroup,jdbcType=BIT},
      update_unread_count_time = #{record.updateUnreadCountTime,jdbcType=BIGINT},
      attached_info = #{record.attachedInfo,jdbcType=VARCHAR},
      ex = #{record.ex,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update conversations
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.conversationType != null">
            conversation_type = #{record.conversationType,jdbcType=INTEGER},
          </if>
          <if test="record.userId != null">
            user_id = #{record.userId,jdbcType=CHAR},
          </if>
          <if test="record.groupId != null">
            group_id = #{record.groupId,jdbcType=CHAR},
          </if>
          <if test="record.recvMsgOpt != null">
            recv_msg_opt = #{record.recvMsgOpt,jdbcType=INTEGER},
          </if>
          <if test="record.unreadCount != null">
            unread_count = #{record.unreadCount,jdbcType=INTEGER},
          </if>
          <if test="record.draftTextTime != null">
            draft_text_time = #{record.draftTextTime,jdbcType=BIGINT},
          </if>
          <if test="record.isPinned != null">
            is_pinned = #{record.isPinned,jdbcType=BIT},
          </if>
          <if test="record.isPrivateChat != null">
            is_private_chat = #{record.isPrivateChat,jdbcType=BIT},
          </if>
          <if test="record.burnDuration != null">
            burn_duration = #{record.burnDuration,jdbcType=INTEGER},
          </if>
          <if test="record.groupAtType != null">
            group_at_type = #{record.groupAtType,jdbcType=INTEGER},
          </if>
          <if test="record.isNotInGroup != null">
            is_not_in_group = #{record.isNotInGroup,jdbcType=BIT},
          </if>
          <if test="record.updateUnreadCountTime != null">
            update_unread_count_time = #{record.updateUnreadCountTime,jdbcType=BIGINT},
          </if>
          <if test="record.attachedInfo != null">
            attached_info = #{record.attachedInfo,jdbcType=VARCHAR},
          </if>
          <if test="record.ex != null">
            ex = #{record.ex,jdbcType=VARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    where owner_user_id = #{record.ownerUserId,jdbcType=CHAR}
      and conversation_id = #{record.conversationId,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="net.czqu.openimserver.dao.pojo.Conversations">
    update conversations
    set conversation_type = #{conversationType,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=CHAR},
      group_id = #{groupId,jdbcType=CHAR},
      recv_msg_opt = #{recvMsgOpt,jdbcType=INTEGER},
      unread_count = #{unreadCount,jdbcType=INTEGER},
      draft_text_time = #{draftTextTime,jdbcType=BIGINT},
      is_pinned = #{isPinned,jdbcType=BIT},
      is_private_chat = #{isPrivateChat,jdbcType=BIT},
      burn_duration = #{burnDuration,jdbcType=INTEGER},
      group_at_type = #{groupAtType,jdbcType=INTEGER},
      is_not_in_group = #{isNotInGroup,jdbcType=BIT},
      update_unread_count_time = #{updateUnreadCountTime,jdbcType=BIGINT},
      attached_info = #{attachedInfo,jdbcType=VARCHAR},
      ex = #{ex,jdbcType=VARCHAR}
    where owner_user_id = #{ownerUserId,jdbcType=CHAR}
      and conversation_id = #{conversationId,jdbcType=CHAR}
  </update>
  <select id="selectOneByExample" parameterType="net.czqu.openimserver.dao.example.ConversationsExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from conversations
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleSelective" parameterType="map" resultMap="BaseResultMap">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
    from conversations
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" parameterType="map">
    insert into conversations
    (owner_user_id, conversation_id, conversation_type, user_id, group_id, recv_msg_opt, 
      unread_count, draft_text_time, is_pinned, is_private_chat, burn_duration, group_at_type, 
      is_not_in_group, update_unread_count_time, attached_info, ex)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.ownerUserId,jdbcType=CHAR}, #{item.conversationId,jdbcType=CHAR}, #{item.conversationType,jdbcType=INTEGER}, 
        #{item.userId,jdbcType=CHAR}, #{item.groupId,jdbcType=CHAR}, #{item.recvMsgOpt,jdbcType=INTEGER}, 
        #{item.unreadCount,jdbcType=INTEGER}, #{item.draftTextTime,jdbcType=BIGINT}, #{item.isPinned,jdbcType=BIT}, 
        #{item.isPrivateChat,jdbcType=BIT}, #{item.burnDuration,jdbcType=INTEGER}, #{item.groupAtType,jdbcType=INTEGER}, 
        #{item.isNotInGroup,jdbcType=BIT}, #{item.updateUnreadCountTime,jdbcType=BIGINT}, 
        #{item.attachedInfo,jdbcType=VARCHAR}, #{item.ex,jdbcType=VARCHAR})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    insert into conversations (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'owner_user_id'.toString() == column.value">
          #{item.ownerUserId,jdbcType=CHAR}
        </if>
        <if test="'conversation_id'.toString() == column.value">
          #{item.conversationId,jdbcType=CHAR}
        </if>
        <if test="'conversation_type'.toString() == column.value">
          #{item.conversationType,jdbcType=INTEGER}
        </if>
        <if test="'user_id'.toString() == column.value">
          #{item.userId,jdbcType=CHAR}
        </if>
        <if test="'group_id'.toString() == column.value">
          #{item.groupId,jdbcType=CHAR}
        </if>
        <if test="'recv_msg_opt'.toString() == column.value">
          #{item.recvMsgOpt,jdbcType=INTEGER}
        </if>
        <if test="'unread_count'.toString() == column.value">
          #{item.unreadCount,jdbcType=INTEGER}
        </if>
        <if test="'draft_text_time'.toString() == column.value">
          #{item.draftTextTime,jdbcType=BIGINT}
        </if>
        <if test="'is_pinned'.toString() == column.value">
          #{item.isPinned,jdbcType=BIT}
        </if>
        <if test="'is_private_chat'.toString() == column.value">
          #{item.isPrivateChat,jdbcType=BIT}
        </if>
        <if test="'burn_duration'.toString() == column.value">
          #{item.burnDuration,jdbcType=INTEGER}
        </if>
        <if test="'group_at_type'.toString() == column.value">
          #{item.groupAtType,jdbcType=INTEGER}
        </if>
        <if test="'is_not_in_group'.toString() == column.value">
          #{item.isNotInGroup,jdbcType=BIT}
        </if>
        <if test="'update_unread_count_time'.toString() == column.value">
          #{item.updateUnreadCountTime,jdbcType=BIGINT}
        </if>
        <if test="'attached_info'.toString() == column.value">
          #{item.attachedInfo,jdbcType=VARCHAR}
        </if>
        <if test="'ex'.toString() == column.value">
          #{item.ex,jdbcType=VARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>