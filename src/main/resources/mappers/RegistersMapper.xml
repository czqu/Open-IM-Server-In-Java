<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.czqu.openimserver.dao.mapper.RegistersMapper">
  <resultMap id="BaseResultMap" type="net.czqu.openimserver.dao.pojo.Registers">
    <id column="account" jdbcType="CHAR" property="account" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="ex" jdbcType="VARCHAR" property="ex" />
    <result column="user_id" jdbcType="VARCHAR" property="userId" />
    <result column="area_code" jdbcType="VARCHAR" property="areaCode" />
    <result column="invitation_code" jdbcType="VARCHAR" property="invitationCode" />
    <result column="register_ip" jdbcType="VARCHAR" property="registerIp" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    account, password, ex, user_id, area_code, invitation_code, register_ip
  </sql>
  <select id="selectByExample" parameterType="net.czqu.openimserver.dao.example.RegistersExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from registers
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExampleSelective" parameterType="map" resultMap="BaseResultMap">
    select
    <if test="example != null and example.distinct">
      distinct
    </if>
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
    from registers
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    <if test="example != null and example.rows != null">
      <if test="example.offset != null">
        limit ${example.offset}, ${example.rows}
      </if>
      <if test="example.offset == null">
        limit ${example.rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from registers
    where account = #{account,jdbcType=CHAR}
  </select>
  <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="BaseResultMap">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
    from registers
    where account = #{account,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from registers
    where account = #{account,jdbcType=CHAR}
  </delete>
  <delete id="deleteByExample" parameterType="net.czqu.openimserver.dao.example.RegistersExample">
    delete from registers
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="net.czqu.openimserver.dao.pojo.Registers">
    insert into registers (account, password, ex, 
      user_id, area_code, invitation_code, 
      register_ip)
    values (#{account,jdbcType=CHAR}, #{password,jdbcType=VARCHAR}, #{ex,jdbcType=VARCHAR}, 
      #{userId,jdbcType=VARCHAR}, #{areaCode,jdbcType=VARCHAR}, #{invitationCode,jdbcType=VARCHAR}, 
      #{registerIp,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="map">
    insert into registers
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.account != null">
            account,
          </if>
          <if test="record.password != null">
            password,
          </if>
          <if test="record.ex != null">
            ex,
          </if>
          <if test="record.userId != null">
            user_id,
          </if>
          <if test="record.areaCode != null">
            area_code,
          </if>
          <if test="record.invitationCode != null">
            invitation_code,
          </if>
          <if test="record.registerIp != null">
            register_ip,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.account != null">
            #{record.account,jdbcType=CHAR},
          </if>
          <if test="record.password != null">
            #{record.password,jdbcType=VARCHAR},
          </if>
          <if test="record.ex != null">
            #{record.ex,jdbcType=VARCHAR},
          </if>
          <if test="record.userId != null">
            #{record.userId,jdbcType=VARCHAR},
          </if>
          <if test="record.areaCode != null">
            #{record.areaCode,jdbcType=VARCHAR},
          </if>
          <if test="record.invitationCode != null">
            #{record.invitationCode,jdbcType=VARCHAR},
          </if>
          <if test="record.registerIp != null">
            #{record.registerIp,jdbcType=VARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="net.czqu.openimserver.dao.example.RegistersExample" resultType="java.lang.Long">
    select count(*) from registers
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update registers
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.account != null">
            account = #{record.account,jdbcType=CHAR},
          </if>
          <if test="record.password != null">
            password = #{record.password,jdbcType=VARCHAR},
          </if>
          <if test="record.ex != null">
            ex = #{record.ex,jdbcType=VARCHAR},
          </if>
          <if test="record.userId != null">
            user_id = #{record.userId,jdbcType=VARCHAR},
          </if>
          <if test="record.areaCode != null">
            area_code = #{record.areaCode,jdbcType=VARCHAR},
          </if>
          <if test="record.invitationCode != null">
            invitation_code = #{record.invitationCode,jdbcType=VARCHAR},
          </if>
          <if test="record.registerIp != null">
            register_ip = #{record.registerIp,jdbcType=VARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update registers
    set account = #{record.account,jdbcType=CHAR},
      password = #{record.password,jdbcType=VARCHAR},
      ex = #{record.ex,jdbcType=VARCHAR},
      user_id = #{record.userId,jdbcType=VARCHAR},
      area_code = #{record.areaCode,jdbcType=VARCHAR},
      invitation_code = #{record.invitationCode,jdbcType=VARCHAR},
      register_ip = #{record.registerIp,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update registers
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.password != null">
            password = #{record.password,jdbcType=VARCHAR},
          </if>
          <if test="record.ex != null">
            ex = #{record.ex,jdbcType=VARCHAR},
          </if>
          <if test="record.userId != null">
            user_id = #{record.userId,jdbcType=VARCHAR},
          </if>
          <if test="record.areaCode != null">
            area_code = #{record.areaCode,jdbcType=VARCHAR},
          </if>
          <if test="record.invitationCode != null">
            invitation_code = #{record.invitationCode,jdbcType=VARCHAR},
          </if>
          <if test="record.registerIp != null">
            register_ip = #{record.registerIp,jdbcType=VARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    where account = #{record.account,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="net.czqu.openimserver.dao.pojo.Registers">
    update registers
    set password = #{password,jdbcType=VARCHAR},
      ex = #{ex,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=VARCHAR},
      area_code = #{areaCode,jdbcType=VARCHAR},
      invitation_code = #{invitationCode,jdbcType=VARCHAR},
      register_ip = #{registerIp,jdbcType=VARCHAR}
    where account = #{account,jdbcType=CHAR}
  </update>
  <select id="selectOneByExample" parameterType="net.czqu.openimserver.dao.example.RegistersExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from registers
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleSelective" parameterType="map" resultMap="BaseResultMap">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
    from registers
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" parameterType="map">
    insert into registers
    (account, password, ex, user_id, area_code, invitation_code, register_ip)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.account,jdbcType=CHAR}, #{item.password,jdbcType=VARCHAR}, #{item.ex,jdbcType=VARCHAR}, 
        #{item.userId,jdbcType=VARCHAR}, #{item.areaCode,jdbcType=VARCHAR}, #{item.invitationCode,jdbcType=VARCHAR}, 
        #{item.registerIp,jdbcType=VARCHAR})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    insert into registers (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'account'.toString() == column.value">
          #{item.account,jdbcType=CHAR}
        </if>
        <if test="'password'.toString() == column.value">
          #{item.password,jdbcType=VARCHAR}
        </if>
        <if test="'ex'.toString() == column.value">
          #{item.ex,jdbcType=VARCHAR}
        </if>
        <if test="'user_id'.toString() == column.value">
          #{item.userId,jdbcType=VARCHAR}
        </if>
        <if test="'area_code'.toString() == column.value">
          #{item.areaCode,jdbcType=VARCHAR}
        </if>
        <if test="'invitation_code'.toString() == column.value">
          #{item.invitationCode,jdbcType=VARCHAR}
        </if>
        <if test="'register_ip'.toString() == column.value">
          #{item.registerIp,jdbcType=VARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>