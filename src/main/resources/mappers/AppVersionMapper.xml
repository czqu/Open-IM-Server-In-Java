<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.czqu.openimserver.dao.mapper.AppVersionMapper">
  <resultMap id="BaseResultMap" type="net.czqu.openimserver.dao.pojo.AppVersion">
    <id column="type" jdbcType="BIGINT" property="type" />
    <result column="version" jdbcType="VARCHAR" property="version" />
    <result column="update_time" jdbcType="BIGINT" property="updateTime" />
    <result column="force_update" jdbcType="BIT" property="forceUpdate" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="net.czqu.openimserver.dao.pojo.AppVersionWithBLOBs">
    <result column="file_name" jdbcType="LONGVARCHAR" property="fileName" />
    <result column="yaml_name" jdbcType="LONGVARCHAR" property="yamlName" />
    <result column="update_log" jdbcType="LONGVARCHAR" property="updateLog" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    type, version, update_time, force_update
  </sql>
  <sql id="Blob_Column_List">
    file_name, yaml_name, update_log
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="net.czqu.openimserver.dao.example.AppVersionExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from app_version
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExample" parameterType="net.czqu.openimserver.dao.example.AppVersionExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from app_version
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExampleSelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <if test="example != null and example.distinct">
      distinct
    </if>
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from app_version
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    <if test="example != null and example.rows != null">
      <if test="example.offset != null">
        limit ${example.offset}, ${example.rows}
      </if>
      <if test="example.offset == null">
        limit ${example.rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from app_version
    where type = #{type,jdbcType=BIGINT}
  </select>
  <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from app_version
    where type = #{type,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from app_version
    where type = #{type,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="net.czqu.openimserver.dao.example.AppVersionExample">
    delete from app_version
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="net.czqu.openimserver.dao.pojo.AppVersionWithBLOBs">
    insert into app_version (type, version, update_time, 
      force_update, file_name, yaml_name, 
      update_log)
    values (#{type,jdbcType=BIGINT}, #{version,jdbcType=VARCHAR}, #{updateTime,jdbcType=BIGINT}, 
      #{forceUpdate,jdbcType=BIT}, #{fileName,jdbcType=LONGVARCHAR}, #{yamlName,jdbcType=LONGVARCHAR}, 
      #{updateLog,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="map">
    insert into app_version
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.type != null">
            type,
          </if>
          <if test="record.version != null">
            version,
          </if>
          <if test="record.updateTime != null">
            update_time,
          </if>
          <if test="record.forceUpdate != null">
            force_update,
          </if>
          <if test="record.fileName != null">
            file_name,
          </if>
          <if test="record.yamlName != null">
            yaml_name,
          </if>
          <if test="record.updateLog != null">
            update_log,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.type != null">
            #{record.type,jdbcType=BIGINT},
          </if>
          <if test="record.version != null">
            #{record.version,jdbcType=VARCHAR},
          </if>
          <if test="record.updateTime != null">
            #{record.updateTime,jdbcType=BIGINT},
          </if>
          <if test="record.forceUpdate != null">
            #{record.forceUpdate,jdbcType=BIT},
          </if>
          <if test="record.fileName != null">
            #{record.fileName,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.yamlName != null">
            #{record.yamlName,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.updateLog != null">
            #{record.updateLog,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="net.czqu.openimserver.dao.example.AppVersionExample" resultType="java.lang.Long">
    select count(*) from app_version
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update app_version
    SET
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.type != null">
            type = #{record.type,jdbcType=BIGINT},
          </if>
          <if test="record.version != null">
            version = #{record.version,jdbcType=VARCHAR},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=BIGINT},
          </if>
          <if test="record.forceUpdate != null">
            force_update = #{record.forceUpdate,jdbcType=BIT},
          </if>
          <if test="record.fileName != null">
            file_name = #{record.fileName,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.yamlName != null">
            yaml_name = #{record.yamlName,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.updateLog != null">
            update_log = #{record.updateLog,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update app_version
    set type = #{record.type,jdbcType=BIGINT},
      version = #{record.version,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=BIGINT},
      force_update = #{record.forceUpdate,jdbcType=BIT},
      file_name = #{record.fileName,jdbcType=LONGVARCHAR},
      yaml_name = #{record.yamlName,jdbcType=LONGVARCHAR},
      update_log = #{record.updateLog,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update app_version
    set type = #{record.type,jdbcType=BIGINT},
      version = #{record.version,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=BIGINT},
      force_update = #{record.forceUpdate,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update app_version
    SET
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.version != null">
            version = #{record.version,jdbcType=VARCHAR},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=BIGINT},
          </if>
          <if test="record.forceUpdate != null">
            force_update = #{record.forceUpdate,jdbcType=BIT},
          </if>
          <if test="record.fileName != null">
            file_name = #{record.fileName,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.yamlName != null">
            yaml_name = #{record.yamlName,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.updateLog != null">
            update_log = #{record.updateLog,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    where type = #{record.type,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="net.czqu.openimserver.dao.pojo.AppVersionWithBLOBs">
    update app_version
    set version = #{version,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=BIGINT},
      force_update = #{forceUpdate,jdbcType=BIT},
      file_name = #{fileName,jdbcType=LONGVARCHAR},
      yaml_name = #{yamlName,jdbcType=LONGVARCHAR},
      update_log = #{updateLog,jdbcType=LONGVARCHAR}
    where type = #{type,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="net.czqu.openimserver.dao.pojo.AppVersion">
    update app_version
    set version = #{version,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=BIGINT},
      force_update = #{forceUpdate,jdbcType=BIT}
    where type = #{type,jdbcType=BIGINT}
  </update>
  <select id="selectOneByExample" parameterType="net.czqu.openimserver.dao.example.AppVersionExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from app_version
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleWithBLOBs" parameterType="net.czqu.openimserver.dao.example.AppVersionExample" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from app_version
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleSelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from app_version
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" parameterType="map">
    insert into app_version
    (type, version, update_time, force_update, file_name, yaml_name, update_log)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.type,jdbcType=BIGINT}, #{item.version,jdbcType=VARCHAR}, #{item.updateTime,jdbcType=BIGINT}, 
        #{item.forceUpdate,jdbcType=BIT}, #{item.fileName,jdbcType=LONGVARCHAR}, #{item.yamlName,jdbcType=LONGVARCHAR}, 
        #{item.updateLog,jdbcType=LONGVARCHAR})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    insert into app_version (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'type'.toString() == column.value">
          #{item.type,jdbcType=BIGINT}
        </if>
        <if test="'version'.toString() == column.value">
          #{item.version,jdbcType=VARCHAR}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=BIGINT}
        </if>
        <if test="'force_update'.toString() == column.value">
          #{item.forceUpdate,jdbcType=BIT}
        </if>
        <if test="'file_name'.toString() == column.value">
          #{item.fileName,jdbcType=LONGVARCHAR}
        </if>
        <if test="'yaml_name'.toString() == column.value">
          #{item.yamlName,jdbcType=LONGVARCHAR}
        </if>
        <if test="'update_log'.toString() == column.value">
          #{item.updateLog,jdbcType=LONGVARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
  <resultMap id="BaseResultMap" type="net.czqu.openimserver.dao.pojo.AppVersion">
    <id column="type" jdbcType="BIGINT" property="type" />
    <result column="version" jdbcType="VARCHAR" property="version" />
    <result column="update_time" jdbcType="BIGINT" property="updateTime" />
    <result column="force_update" jdbcType="BIT" property="forceUpdate" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="net.czqu.openimserver.dao.pojo.AppVersionWithBLOBs">
    <result column="file_name" jdbcType="LONGVARCHAR" property="fileName" />
    <result column="yaml_name" jdbcType="LONGVARCHAR" property="yamlName" />
    <result column="update_log" jdbcType="LONGVARCHAR" property="updateLog" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    type, version, update_time, force_update
  </sql>
  <sql id="Blob_Column_List">
    file_name, yaml_name, update_log
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="net.czqu.openimserver.dao.example.AppVersionExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from app_version
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExample" parameterType="net.czqu.openimserver.dao.example.AppVersionExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from app_version
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExampleSelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <if test="example != null and example.distinct">
      distinct
    </if>
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from app_version
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    <if test="example != null and example.rows != null">
      <if test="example.offset != null">
        limit ${example.offset}, ${example.rows}
      </if>
      <if test="example.offset == null">
        limit ${example.rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from app_version
    where type = #{type,jdbcType=BIGINT}
  </select>
  <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from app_version
    where type = #{type,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from app_version
    where type = #{type,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="net.czqu.openimserver.dao.example.AppVersionExample">
    delete from app_version
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="net.czqu.openimserver.dao.pojo.AppVersionWithBLOBs">
    insert into app_version (type, version, update_time, 
      force_update, file_name, yaml_name, 
      update_log)
    values (#{type,jdbcType=BIGINT}, #{version,jdbcType=VARCHAR}, #{updateTime,jdbcType=BIGINT}, 
      #{forceUpdate,jdbcType=BIT}, #{fileName,jdbcType=LONGVARCHAR}, #{yamlName,jdbcType=LONGVARCHAR}, 
      #{updateLog,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="map">
    insert into app_version
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.type != null">
            type,
          </if>
          <if test="record.version != null">
            version,
          </if>
          <if test="record.updateTime != null">
            update_time,
          </if>
          <if test="record.forceUpdate != null">
            force_update,
          </if>
          <if test="record.fileName != null">
            file_name,
          </if>
          <if test="record.yamlName != null">
            yaml_name,
          </if>
          <if test="record.updateLog != null">
            update_log,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.type != null">
            #{record.type,jdbcType=BIGINT},
          </if>
          <if test="record.version != null">
            #{record.version,jdbcType=VARCHAR},
          </if>
          <if test="record.updateTime != null">
            #{record.updateTime,jdbcType=BIGINT},
          </if>
          <if test="record.forceUpdate != null">
            #{record.forceUpdate,jdbcType=BIT},
          </if>
          <if test="record.fileName != null">
            #{record.fileName,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.yamlName != null">
            #{record.yamlName,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.updateLog != null">
            #{record.updateLog,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="net.czqu.openimserver.dao.example.AppVersionExample" resultType="java.lang.Long">
    select count(*) from app_version
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update app_version
    SET
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.type != null">
            type = #{record.type,jdbcType=BIGINT},
          </if>
          <if test="record.version != null">
            version = #{record.version,jdbcType=VARCHAR},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=BIGINT},
          </if>
          <if test="record.forceUpdate != null">
            force_update = #{record.forceUpdate,jdbcType=BIT},
          </if>
          <if test="record.fileName != null">
            file_name = #{record.fileName,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.yamlName != null">
            yaml_name = #{record.yamlName,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.updateLog != null">
            update_log = #{record.updateLog,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update app_version
    set type = #{record.type,jdbcType=BIGINT},
      version = #{record.version,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=BIGINT},
      force_update = #{record.forceUpdate,jdbcType=BIT},
      file_name = #{record.fileName,jdbcType=LONGVARCHAR},
      yaml_name = #{record.yamlName,jdbcType=LONGVARCHAR},
      update_log = #{record.updateLog,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update app_version
    set type = #{record.type,jdbcType=BIGINT},
      version = #{record.version,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=BIGINT},
      force_update = #{record.forceUpdate,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update app_version
    SET
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.version != null">
            version = #{record.version,jdbcType=VARCHAR},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=BIGINT},
          </if>
          <if test="record.forceUpdate != null">
            force_update = #{record.forceUpdate,jdbcType=BIT},
          </if>
          <if test="record.fileName != null">
            file_name = #{record.fileName,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.yamlName != null">
            yaml_name = #{record.yamlName,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.updateLog != null">
            update_log = #{record.updateLog,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    where type = #{record.type,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="net.czqu.openimserver.dao.pojo.AppVersionWithBLOBs">
    update app_version
    set version = #{version,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=BIGINT},
      force_update = #{forceUpdate,jdbcType=BIT},
      file_name = #{fileName,jdbcType=LONGVARCHAR},
      yaml_name = #{yamlName,jdbcType=LONGVARCHAR},
      update_log = #{updateLog,jdbcType=LONGVARCHAR}
    where type = #{type,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="net.czqu.openimserver.dao.pojo.AppVersion">
    update app_version
    set version = #{version,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=BIGINT},
      force_update = #{forceUpdate,jdbcType=BIT}
    where type = #{type,jdbcType=BIGINT}
  </update>
  <select id="selectOneByExample" parameterType="net.czqu.openimserver.dao.example.AppVersionExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from app_version
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleWithBLOBs" parameterType="net.czqu.openimserver.dao.example.AppVersionExample" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from app_version
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleSelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from app_version
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" parameterType="map">
    insert into app_version
    (type, version, update_time, force_update, file_name, yaml_name, update_log)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.type,jdbcType=BIGINT}, #{item.version,jdbcType=VARCHAR}, #{item.updateTime,jdbcType=BIGINT}, 
        #{item.forceUpdate,jdbcType=BIT}, #{item.fileName,jdbcType=LONGVARCHAR}, #{item.yamlName,jdbcType=LONGVARCHAR}, 
        #{item.updateLog,jdbcType=LONGVARCHAR})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    insert into app_version (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'type'.toString() == column.value">
          #{item.type,jdbcType=BIGINT}
        </if>
        <if test="'version'.toString() == column.value">
          #{item.version,jdbcType=VARCHAR}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=BIGINT}
        </if>
        <if test="'force_update'.toString() == column.value">
          #{item.forceUpdate,jdbcType=BIT}
        </if>
        <if test="'file_name'.toString() == column.value">
          #{item.fileName,jdbcType=LONGVARCHAR}
        </if>
        <if test="'yaml_name'.toString() == column.value">
          #{item.yamlName,jdbcType=LONGVARCHAR}
        </if>
        <if test="'update_log'.toString() == column.value">
          #{item.updateLog,jdbcType=LONGVARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
  <resultMap id="BaseResultMap" type="net.czqu.openimserver.dao.pojo.AppVersion">
    <id column="type" jdbcType="BIGINT" property="type" />
    <result column="version" jdbcType="VARCHAR" property="version" />
    <result column="update_time" jdbcType="BIGINT" property="updateTime" />
    <result column="force_update" jdbcType="BIT" property="forceUpdate" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="net.czqu.openimserver.dao.pojo.AppVersionWithBLOBs">
    <result column="file_name" jdbcType="LONGVARCHAR" property="fileName" />
    <result column="yaml_name" jdbcType="LONGVARCHAR" property="yamlName" />
    <result column="update_log" jdbcType="LONGVARCHAR" property="updateLog" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    type, version, update_time, force_update
  </sql>
  <sql id="Blob_Column_List">
    file_name, yaml_name, update_log
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="net.czqu.openimserver.dao.example.AppVersionExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from app_version
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExample" parameterType="net.czqu.openimserver.dao.example.AppVersionExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from app_version
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExampleSelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <if test="example != null and example.distinct">
      distinct
    </if>
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from app_version
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    <if test="example != null and example.rows != null">
      <if test="example.offset != null">
        limit ${example.offset}, ${example.rows}
      </if>
      <if test="example.offset == null">
        limit ${example.rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from app_version
    where type = #{type,jdbcType=BIGINT}
  </select>
  <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from app_version
    where type = #{type,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from app_version
    where type = #{type,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="net.czqu.openimserver.dao.example.AppVersionExample">
    delete from app_version
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="net.czqu.openimserver.dao.pojo.AppVersionWithBLOBs">
    insert into app_version (type, version, update_time, 
      force_update, file_name, yaml_name, 
      update_log)
    values (#{type,jdbcType=BIGINT}, #{version,jdbcType=VARCHAR}, #{updateTime,jdbcType=BIGINT}, 
      #{forceUpdate,jdbcType=BIT}, #{fileName,jdbcType=LONGVARCHAR}, #{yamlName,jdbcType=LONGVARCHAR}, 
      #{updateLog,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="map">
    insert into app_version
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.type != null">
            type,
          </if>
          <if test="record.version != null">
            version,
          </if>
          <if test="record.updateTime != null">
            update_time,
          </if>
          <if test="record.forceUpdate != null">
            force_update,
          </if>
          <if test="record.fileName != null">
            file_name,
          </if>
          <if test="record.yamlName != null">
            yaml_name,
          </if>
          <if test="record.updateLog != null">
            update_log,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.type != null">
            #{record.type,jdbcType=BIGINT},
          </if>
          <if test="record.version != null">
            #{record.version,jdbcType=VARCHAR},
          </if>
          <if test="record.updateTime != null">
            #{record.updateTime,jdbcType=BIGINT},
          </if>
          <if test="record.forceUpdate != null">
            #{record.forceUpdate,jdbcType=BIT},
          </if>
          <if test="record.fileName != null">
            #{record.fileName,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.yamlName != null">
            #{record.yamlName,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.updateLog != null">
            #{record.updateLog,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="net.czqu.openimserver.dao.example.AppVersionExample" resultType="java.lang.Long">
    select count(*) from app_version
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update app_version
    SET
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.type != null">
            type = #{record.type,jdbcType=BIGINT},
          </if>
          <if test="record.version != null">
            version = #{record.version,jdbcType=VARCHAR},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=BIGINT},
          </if>
          <if test="record.forceUpdate != null">
            force_update = #{record.forceUpdate,jdbcType=BIT},
          </if>
          <if test="record.fileName != null">
            file_name = #{record.fileName,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.yamlName != null">
            yaml_name = #{record.yamlName,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.updateLog != null">
            update_log = #{record.updateLog,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update app_version
    set type = #{record.type,jdbcType=BIGINT},
      version = #{record.version,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=BIGINT},
      force_update = #{record.forceUpdate,jdbcType=BIT},
      file_name = #{record.fileName,jdbcType=LONGVARCHAR},
      yaml_name = #{record.yamlName,jdbcType=LONGVARCHAR},
      update_log = #{record.updateLog,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update app_version
    set type = #{record.type,jdbcType=BIGINT},
      version = #{record.version,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=BIGINT},
      force_update = #{record.forceUpdate,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update app_version
    SET
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.version != null">
            version = #{record.version,jdbcType=VARCHAR},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=BIGINT},
          </if>
          <if test="record.forceUpdate != null">
            force_update = #{record.forceUpdate,jdbcType=BIT},
          </if>
          <if test="record.fileName != null">
            file_name = #{record.fileName,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.yamlName != null">
            yaml_name = #{record.yamlName,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.updateLog != null">
            update_log = #{record.updateLog,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    where type = #{record.type,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="net.czqu.openimserver.dao.pojo.AppVersionWithBLOBs">
    update app_version
    set version = #{version,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=BIGINT},
      force_update = #{forceUpdate,jdbcType=BIT},
      file_name = #{fileName,jdbcType=LONGVARCHAR},
      yaml_name = #{yamlName,jdbcType=LONGVARCHAR},
      update_log = #{updateLog,jdbcType=LONGVARCHAR}
    where type = #{type,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="net.czqu.openimserver.dao.pojo.AppVersion">
    update app_version
    set version = #{version,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=BIGINT},
      force_update = #{forceUpdate,jdbcType=BIT}
    where type = #{type,jdbcType=BIGINT}
  </update>
  <select id="selectOneByExample" parameterType="net.czqu.openimserver.dao.example.AppVersionExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from app_version
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleWithBLOBs" parameterType="net.czqu.openimserver.dao.example.AppVersionExample" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from app_version
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleSelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from app_version
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" parameterType="map">
    insert into app_version
    (type, version, update_time, force_update, file_name, yaml_name, update_log)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.type,jdbcType=BIGINT}, #{item.version,jdbcType=VARCHAR}, #{item.updateTime,jdbcType=BIGINT}, 
        #{item.forceUpdate,jdbcType=BIT}, #{item.fileName,jdbcType=LONGVARCHAR}, #{item.yamlName,jdbcType=LONGVARCHAR}, 
        #{item.updateLog,jdbcType=LONGVARCHAR})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    insert into app_version (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'type'.toString() == column.value">
          #{item.type,jdbcType=BIGINT}
        </if>
        <if test="'version'.toString() == column.value">
          #{item.version,jdbcType=VARCHAR}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=BIGINT}
        </if>
        <if test="'force_update'.toString() == column.value">
          #{item.forceUpdate,jdbcType=BIT}
        </if>
        <if test="'file_name'.toString() == column.value">
          #{item.fileName,jdbcType=LONGVARCHAR}
        </if>
        <if test="'yaml_name'.toString() == column.value">
          #{item.yamlName,jdbcType=LONGVARCHAR}
        </if>
        <if test="'update_log'.toString() == column.value">
          #{item.updateLog,jdbcType=LONGVARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>